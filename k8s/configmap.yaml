apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-html
  namespace: simple-web
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Kubernetes Demo</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
            }
            h1 {
                color: #333;
                text-align: center;
            }
            .container {
                border: 1px solid #ddd;
                padding: 20px;
                border-radius: 5px;
                background-color: #f9f9f9;
            }
            .card {
                background: white;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 15px;
                margin-bottom: 10px;
            }
            .footer {
                text-align: center;
                margin-top: 30px;
                color: #777;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Kubernetes Demo</h1>
            
            <div class="card">
                <h2>Frontend Container</h2>
                <p>This is a simple Nginx container serving static content.</p>
            </div>
            
            <div class="card">
                <h2>Backend Container</h2>
                <p>The backend is running a Node.js application on port 5000.</p>
                <p>Try accessing the API at <a href="/api" id="api-link">API Endpoint</a></p>
            </div>
            
            <div class="card">
                <h2>Database Container</h2>
                <p>PostgreSQL database is running.</p>
                <p>Connection string: <code>postgres://postgres:example@db:5432/demo</code></p>
            </div>
        </div>
        
        <div class="footer">
            <p>Kubernetes Demo - Nginx ↔️ Node.js ↔️ PostgreSQL</p>
        </div>
        
        <script>
            // Fetch data from the backend API
            fetch('/api')
                .then(response => response.json())
                .then(data => {
                    const apiCard = document.querySelector('.card:nth-child(2)');
                    apiCard.innerHTML += `<div class="api-response"><strong>API Response:</strong> ${JSON.stringify(data)}</div>`;
                })
                .catch(error => {
                    console.error('Error fetching API:', error);
                });
        </script>
    </body>
    </html>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: simple-web
data:
  nginx.conf: |
    server {
        listen 80;
        
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        
        # Proxy requests to the backend
        location /api {
            proxy_pass http://backend:5000/api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: simple-web
data:
  server.js: |
    const express = require('express');
    const cors = require('cors');
    const morgan = require('morgan');

    // Initialize Express app
    const app = express();
    const PORT = process.env.PORT || 5000;

    // Middleware
    app.use(cors());
    app.use(express.json());
    app.use(morgan('dev'));

    // Root API route
    app.get('/', (req, res) => {
      res.json({ message: 'Backend API is running successfully' });
    });

    // API endpoint
    app.get('/api', (req, res) => {
      res.json({ 
        message: 'Backend API is running successfully',
        timestamp: new Date().toISOString(),
        kubernetes: process.env.KUBERNETES === 'true' ? 'Yes' : 'No'
      });
    });

    // Health check endpoint
    app.get('/health', (req, res) => {
      res.status(200).json({ status: 'healthy' });
    });

    // Start server
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`Server running on port ${PORT}`);
    });
